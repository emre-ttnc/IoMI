@page "/user/confirmnewpassword/{UserId:guid}/{Token}"
@layout PublicLayout
@inject HttpClient Http
@inject ModalManager Modal
<PageTitle> IOMI - Confirm New Password </PageTitle>
<div class="row justify-content-center m-0 p-2">
    <div class="col-md-8 col-lg-6 col-xl-5 col-xxl-4 card p-0 mt-5">
        <div class="card-header">
            <h3 class="text-center my-2"> Create New Password </h3>
        </div>
        <div class="card-body p-4">
            @if (IsResponsed)
            {
                @if (IsVerified)
                {
                    @if (IsSuccess)
                    {
                        <div class="alert alert-success d-flex align-items-center" role="alert">
                            <ion-icon class="me-2 fs-1" name="checkmark-sharp"></ion-icon>
                            The password for your account has been successfully changed.
                        </div>
                        <div class="d-flex justify-content-center mt-2">
                            <NavLink class="top-nav-link d-flex align-items-center btn btn-secondary" href="/user/login">
                                <ion-icon class="fs-4 me-2" name="arrow-back-outline"></ion-icon> Back to Login
                            </NavLink>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@Request" OnValidSubmit="@PasswordValidated">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label for="password">New Password: </label>
                                <InputText class="form-control" id="password" type="password" @bind-Value="Request.Password" />
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword">Confirm New Password: </label>
                                <InputText class="form-control" id="confirmPassword" type="password" @bind-Value="Request.ConfirmPassword" />
                            </div>
                            <div class="d-flex justify-content-center">
                                <ButtonComponent Caption="Confirm New Password" Color="primary" IsBusy="@IsBusy" IsBusyCaption="Working on it..." Icon="refresh-sharp"></ButtonComponent>
                            </div>
                        </EditForm>
                    }
                }
                else
                {
                    <div class="alert alert-danger d-flex align-items-center" role="alert">
                        <ion-icon class="me-2 fs-1" name="close-circle-outline"></ion-icon>
                        Wrong or invalid request.
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning d-flex align-items-center" role="alert">
                    <div class="spinner-border me-2"></div>
                    Please wait! We are working on it...
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid UserId { get; set; }
    [Parameter] public string? Token { get; set; }
    [Parameter] public bool IsBusy { get; set; } = false;
    [Parameter] public bool IsResponsed { get; set; } = false;
    [Parameter] public bool IsVerified { get; set; } = false;
    [Parameter] public bool IsSuccess { get; set; } = false;
    [Parameter] public ResetPasswordModel Request { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserId == Guid.Empty || string.IsNullOrEmpty(Token?.Trim()))
        {
            IsResponsed = true;
            IsVerified = false;
            return;
        }
        Request.UserId = UserId;
        Request.Token = Token;
        VerifyResetTokenModel verifyResetTokenModel = new() { UserId = UserId, Token = Token ?? "" };
        ServerResponse<bool> isVerified = await Http.PostAndGetServerResponseAsync<bool, VerifyResetTokenModel>("user/verifyresetpasswordtoken", verifyResetTokenModel);
        IsVerified = isVerified.Success;
        IsResponsed = true;
    }

    public async Task PasswordValidated()
    {
        IsBusy = true;
        ServerResponse<bool> response = await Http.PostAndGetServerResponseAsync<bool, ResetPasswordModel>("user/resetpassword", Request);
        if (response.Success)
            IsSuccess = true;

        if(!IsSuccess) await Modal.ShowMessageModalAsync("Failed!", response.ErrorMessage ?? "Unknown error occurred.");
        IsBusy = false;
    }
}

