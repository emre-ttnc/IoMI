@inject HttpClient Http
@inject ModalManager Modal
@inject NavigationManager NavManager
@inject CustomAuthStateProvider AppStateProvider

<div class="row justify-content-center m-0 p-2">
    <div class="col-md-8 col-lg-6 col-xl-5 col-xxl-4 card p-0 mt-5">
        <div class="card-header">
            <h3 class="text-center my-2"> Log in</h3>
        </div>
        <div class="card-body p-4">
            <EditForm Model="@User" OnValidSubmit="@UserValidated">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="username">Username: </label>
                    <InputText class="form-control" id="username" @bind-Value="User.Username" />
                </div>
                <div class="mb-3">
                    <label for="password">Password: </label>
                    <InputText class="form-control" type="password" id="password" @bind-Value="User.Password" />
                </div>
                <div class="d-flex justify-content-center">
                    <ButtonComponent Caption="Log in" Color="primary" IsBusy="@IsBusy" IsBusyCaption="Working on it..." Icon="log-in-outline"></ButtonComponent>
                </div>
            </EditForm>
        </div>
        <div class="card-footer p-2 d-flex justify-content-center">
            <NavLink class="top-nav-link d-flex align-items-center btn btn-secondary" href="/user/resetpassword">
                <ion-icon class="fs-4 me-2" name="repeat-outline"></ion-icon> Reset Password
            </NavLink>
        </div>
    </div>
</div>

@code {
    private UserLoginModel User = new();
    private bool IsBusy = false;

    private async Task UserValidated()
    {
        IsBusy = true;
        ServerResponse<string> response = await Http.PostAndGetServerResponseAsync<string, UserLoginModel>("auth/login", User);
        if (response.Success && !string.IsNullOrEmpty(response?.Value?.Trim()))
        {
            await AppStateProvider.SetTokenAsync(response.Value);
            NavManager.NavigateTo("/roles");
        }
        else
            await Modal.ShowMessageModalAsync("Access Denied!", response?.ErrorMessage ?? "Unknown error.");
        User = new();
        IsBusy = false;
    }
}